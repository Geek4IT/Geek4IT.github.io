package home.solo.launcher.free;

import home.solo.launcher.free.activities.TabSettingMain;
import home.solo.launcher.free.bean.DrawerTabItem;
import home.solo.launcher.free.bean.FirstTabItem;
import home.solo.launcher.free.util.CommonMarks;
import home.solo.launcher.free.util.SettingsHelper;

import java.io.File;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

import android.animation.Animator;
import android.animation.AnimatorListenerAdapter;
import android.animation.AnimatorSet;
import android.animation.ObjectAnimator;
import android.app.ActivityManager;
import android.app.ActivityManager.RecentTaskInfo;
import android.content.ContentResolver;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.pm.PackageManager;
import android.content.pm.PackageManager.NameNotFoundException;
import android.content.res.Resources;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.PorterDuff.Mode;
import android.net.Uri;
import android.os.Handler;
import android.os.Message;
import android.util.AttributeSet;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.BaseAdapter;
import android.widget.HorizontalScrollView;
import android.widget.ImageView;
import android.widget.Spinner;
import android.widget.TabHost;
import android.widget.TabWidget;
import android.widget.TextView;

public class AppsCustomizeTabHost extends TabHost implements
		LauncherTransitionable, TabHost.OnTabChangeListener {
	static final String LOG_TAG = "AppsCustomizeTabHost";

	private boolean spToActivity;// 点击spinner的时候，是跳转其他activity而不是根据条件而刷新抽屉界面

	private static String APPS_TAB_TAG;
	private static String WIDGETS_TAB_TAG;

	private final LayoutInflater mLayoutInflater;
	private ViewGroup mTabs;
	private ViewGroup mTabsContainer;
	private AppsCustomizePagedView mAppsCustomizePane;
	private boolean mSuppressContentCallback = false;
	private ImageView mAnimationBuffer;

	private boolean mInTransition;
	private boolean mResetAfterTransition;
	Context context;
	public HorizontalScrollView hScrollView;
	TabWidget tabs;
	TabContentFactory contentFactory;
	Spinner spinner;
	// 用来临时存放spinner选中的位置
	int spinnerPosition;
	// 监听spinner点击事件
	Handler notifyHand;
	PackageManager pm;
	private final int NEWINSTALLAPPS = 1;
	private final int USERINSTALLAPPS = 2;
	private final int RECENTTASK = 3;
	private final int ALLAPPS = 0;
	ArrayList<FirstTabItem> spList;
	SpinnerAdapter spAdapter;
	TextView tabView;
	public static ArrayList<TabHost.TabSpec> specList = new ArrayList<TabHost.TabSpec>();// 用来存放tabspec，便于动态添加和删除

	public AppsCustomizeTabHost(final Context context, AttributeSet attrs) {
		super(context, attrs);
		mLayoutInflater = LayoutInflater.from(context);
		this.context = context;
		APPS_TAB_TAG = SettingsHelper.getIntPref(context,
				CommonMarks.MAIN_TAB_ID, 1) + "gt";
		WIDGETS_TAB_TAG = SettingsHelper.getIntPref(context,
				CommonMarks.WIDGET_TAB_ID, 2) + "gt";

		pm = context.getApplicationContext().getPackageManager();

		spList = new ArrayList<FirstTabItem>();
		spList.add(new FirstTabItem(context.getResources().getString(
				R.string.drawer_menu_all_apps), true));
		spList.add(new FirstTabItem(context.getResources().getString(
				R.string.drawer_menu_recently_used), false));
		spList.add(new FirstTabItem(context.getResources().getString(
				R.string.drawer_menu_new), false));
		spList.add(new FirstTabItem(context.getResources().getString(
				R.string.drawer_menu_downloaded), false));
		spList.add(new FirstTabItem(context.getResources().getString(
				R.string.drawer_menu_add_group), false));
		spList.add(new FirstTabItem(context.getResources().getString(
				R.string.drawer_menu_add_folder), false));

		notifyHand = new Handler() {

			@Override
			public void handleMessage(Message msg) {
				super.handleMessage(msg);
				if (mAppsCustomizePane != null) {
					selectShowType();
				}
			}

		};

	}

	/**
	 * Convenience methods to select specific tabs. We want to set the content
	 * type immediately in these cases, but we note that we still call
	 * setCurrentTabByTag() so that the tab view reflects the new content (but
	 * doesn't do the animation and logic associated with changing tabs
	 * manually).
	 */
	private void setContentTypeImmediate(String type) {
		onTabChangedStart();
		onTabChangedEnd(type);
	}

	void selectCurrentTab() {
		setContentTypeImmediate(CommonMarks.ContentTypeList.get(0).getId()
				+ "gt");
		setCurrentTabByTag(CommonMarks.ContentTypeList.get(0).getId() + "gt");
	}

	void selectAppsTab() {
		setContentTypeImmediate(SettingsHelper.getIntPref(context,
				CommonMarks.MAIN_TAB_ID, 1) + "gt");
		setCurrentTabByTag(APPS_TAB_TAG);
	}

	void selectWidgetsTab() {
		setContentTypeImmediate(SettingsHelper.getIntPref(context,
				CommonMarks.WIDGET_TAB_ID, 1) + "gt");
		setCurrentTabByTag(WIDGETS_TAB_TAG);
	}

	/**
	 * Setup the tab host and create all necessary tabs.
	 */
	@Override
	protected void onFinishInflate() {
		// Setup the tab host
		setup();

		int color = SettingsHelper.getThemeColor(getContext());
		hScrollView = (HorizontalScrollView) findViewById(R.id.hscrollview);
		hScrollView.getBackground().setColorFilter(color, Mode.SRC_IN);
		hScrollView.findViewById(android.R.id.tabs).getBackground()
				.setColorFilter(color, Mode.SRC_IN);
		final ViewGroup tabsContainer = (ViewGroup) findViewById(R.id.tabs_container);
		tabs = (TabWidget) findViewById(com.android.internal.R.id.tabs);
		final AppsCustomizePagedView appsCustomizePane = (AppsCustomizePagedView) findViewById(R.id.apps_customize_pane_content);
		mTabs = tabs;
		mTabsContainer = tabsContainer;
		mAppsCustomizePane = appsCustomizePane;
		mAnimationBuffer = (ImageView) findViewById(R.id.animation_buffer);
		if (tabs == null || mAppsCustomizePane == null)
			throw new Resources.NotFoundException();

		// Configure the tabs content factory to return the same paged view
		// (that we change the
		// content filter on)
		contentFactory = new TabContentFactory() {
			public View createTabContent(String tag) {
				return appsCustomizePane;
			}
		};
		CommonMarks.ContentTypeList.clear();
		// 初始化tab标签的个数
		ContentResolver contentResolver = getContext().getContentResolver();
		Uri uri = Uri
				.parse("content://home.solo.launcher.free.settings/tabname");
		Cursor cursor = contentResolver.query(uri, null, null, null,
				"tabId asc");
		while (cursor.moveToNext()) {
			if (cursor.getInt(0) == SettingsHelper.getIntPref(context,
					CommonMarks.WIDGET_TAB_ID, 1)
					&& !SettingsHelper.getBooleanPref(context,
							CommonMarks.WIDGET_TAB_EYE, true)) {
				CommonMarks.WIDGET_TAB_POSITION = cursor.getInt(2);
			} else {
				CommonMarks.ContentTypeList.add(new DrawerTabItem(cursor
						.getInt(0), cursor.getString(1).replace("gtdevreplace",
						"'"), cursor.getInt(2)));
			}
		}
		Collections.sort(CommonMarks.ContentTypeList, new ComparatorPosition());
		CommonMarks.tabListReady = true;
		cursor.close();
		for (int i = 0; i < CommonMarks.ContentTypeList.size(); i++) {
			addTabItemFromDb(CommonMarks.ContentTypeList.get(i).getTitle(),
					CommonMarks.ContentTypeList.get(i).getId(), i);
		}

		setOnTabChangedListener(this);

		// Setup the key listener to jump between the last tab view and the
		// market icon
		AppsCustomizeTabKeyEventListener keyListener = new AppsCustomizeTabKeyEventListener();
		View lastTab = tabs.getChildTabViewAt(tabs.getTabCount() - 1);
		lastTab.setOnKeyListener(keyListener);
		View shopButton = findViewById(R.id.menu_button);
		shopButton.getBackground().setColorFilter(color, Mode.SRC_IN);
		shopButton.setOnKeyListener(keyListener);

		// Hide the tab bar until we measure
		mTabsContainer.setAlpha(0f);

		if (CommonMarks.ContentTypeList.get(0).getId() != SettingsHelper
				.getIntPref(context, CommonMarks.MAIN_TAB_ID, 1)) {
			spinner.setFocusable(false);
			spinner.setClickable(false);
		}
	}

	@Override
	protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
		boolean remeasureTabWidth = (mTabs.getLayoutParams().width <= 0);
		super.onMeasure(widthMeasureSpec, heightMeasureSpec);

		// Set the width of the tab list to the content width
		if (remeasureTabWidth) {
			int contentWidth = mAppsCustomizePane.getPageContentWidth();
			if (contentWidth > 0) {
				// Set the width and show the tab bar (if we have a loading
				// graphic, we can switch
				// it off here)
				mTabs.getLayoutParams().width = contentWidth;
				post(new Runnable() {
					public void run() {
						mTabs.requestLayout();
						mTabsContainer.setAlpha(1f);
					}
				});
			}
		}
		super.onMeasure(widthMeasureSpec, heightMeasureSpec);
	}

	@Override
	public boolean onTouchEvent(MotionEvent event) {
		// Intercept all touch events up to the bottom of the AppsCustomizePane
		// so they do not fall
		// through to the workspace and trigger showWorkspace()
		if (event.getY() < mAppsCustomizePane.getBottom()) {
			return true;
		}
		return super.onTouchEvent(event);
	}

	private void onTabChangedStart() {
		mAppsCustomizePane.hideScrollingIndicator(false);
	}

	private void reloadCurrentPage() {
		if (!LauncherApplication.isScreenLarge()) {
			mAppsCustomizePane.flashScrollingIndicator();
		}
		mAppsCustomizePane.loadAssociatedPages(mAppsCustomizePane
				.getCurrentPage());
		mAppsCustomizePane.requestFocus();
	}

	private void onTabChangedEnd(String type) {
		mAppsCustomizePane.setContentType(type);
	}

	@Override
	public void onTabChanged(String tabId) {
		int spinnerPosition = 0;
		for (DrawerTabItem a : CommonMarks.ContentTypeList) {
			if (a.getId() == SettingsHelper.getIntPref(context,
					CommonMarks.MAIN_TAB_ID, 1)) {
				spinnerPosition = CommonMarks.ContentTypeList.indexOf(a);
				break;
			}
		}
		if (getCurrentTab() != spinnerPosition) {
			spinner.setFocusable(false);
			spinner.setClickable(false);
		} else {
			spinner.setFocusable(true);
			spinner.setClickable(true);
		}
		final String type = getContentTypeForTabTag(tabId);
		if (mSuppressContentCallback) {
			mSuppressContentCallback = false;
			return;
		}

		// Animate the changing of the tab content by fading pages in and
		// out
		final Resources res = getResources();
		final int duration = res
				.getInteger(R.integer.config_tabTransitionDuration);

		// We post a runnable here because there is a delay while the first
		// page
		// is loading and
		// the feedback from having changed the tab almost feels better than
		// having it stick
		post(new Runnable() {
			@Override
			public void run() {
				if (mAppsCustomizePane.getMeasuredWidth() <= 0
						|| mAppsCustomizePane.getMeasuredHeight() <= 0) {
					reloadCurrentPage();
					return;
				}

				// Setup the animation buffer
				Bitmap b = Bitmap.createBitmap(
						mAppsCustomizePane.getMeasuredWidth(),
						mAppsCustomizePane.getMeasuredHeight(),
						Bitmap.Config.ARGB_8888);
				Canvas c = new Canvas(b);
				mAppsCustomizePane.draw(c);
				mAppsCustomizePane.setAlpha(0f);
				mAnimationBuffer.setImageBitmap(b);
				mAnimationBuffer.setAlpha(1f);
				mAnimationBuffer.setVisibility(View.VISIBLE);
				c.setBitmap(null);
				b = null;
				// Toggle the new content
				onTabChangedStart();
				onTabChangedEnd(type);

				// Animate the transition
				ObjectAnimator outAnim = ObjectAnimator.ofFloat(
						mAnimationBuffer, "alpha", 0f);
				outAnim.addListener(new AnimatorListenerAdapter() {
					@Override
					public void onAnimationEnd(Animator animation) {
						mAnimationBuffer.setVisibility(View.GONE);
						mAnimationBuffer.setImageBitmap(null);
					}
				});
				ObjectAnimator inAnim = ObjectAnimator.ofFloat(
						mAppsCustomizePane, "alpha", 1f);
				inAnim.addListener(new AnimatorListenerAdapter() {
					@Override
					public void onAnimationEnd(Animator animation) {
						reloadCurrentPage();
					}
				});
				AnimatorSet animSet = new AnimatorSet();
				animSet.playTogether(outAnim, inAnim);
				animSet.setDuration(duration);
				animSet.start();
			}
		});

	}

	public void setCurrentTabFromContent(String type) {
		mSuppressContentCallback = true;
		setCurrentTabByTag(getTabTagForContentType(type));
	}

	/**
	 * Returns the content type for the specified tab tag.
	 */
	public String getContentTypeForTabTag(String tag) {
		String mtag = "";
		if (tag.equals(APPS_TAB_TAG)) {
			mtag = SettingsHelper.getIntPref(context, CommonMarks.MAIN_TAB_ID,
					1) + "gt";
		} else if (tag.equals(WIDGETS_TAB_TAG)) {
			mtag = SettingsHelper.getIntPref(context,
					CommonMarks.WIDGET_TAB_ID, 2) + "gt";
		} else {
			mtag = tag;
		}
		return mtag;
	}

	/**
	 * Returns the tab tag for a given content type.
	 */
	public String getTabTagForContentType(String type) {
		String mtype = "";
		if (type.equals(SettingsHelper.getIntPref(context,
				CommonMarks.MAIN_TAB_ID, 1) + "gt")) {
			mtype = APPS_TAB_TAG;
		} else if (type.equals(SettingsHelper.getIntPref(context,
				CommonMarks.WIDGET_TAB_ID, 2) + "gt")) {
			mtype = WIDGETS_TAB_TAG;
		} else {
			mtype = type;
		}
		return mtype;
	}

	/**
	 * Disable focus on anything under this view in the hierarchy if we are not
	 * visible.
	 */
	@Override
	public int getDescendantFocusability() {
		if (getVisibility() != View.VISIBLE) {
			return ViewGroup.FOCUS_BLOCK_DESCENDANTS;
		}
		return super.getDescendantFocusability();
	}

	void reset() {
		if (mInTransition) {
			// Defer to after the transition to reset
			mResetAfterTransition = true;
		} else {
			// Reset immediately
			mAppsCustomizePane.reset();
		}
	}

	boolean isTransitioning() {
		return mInTransition;
	}

	// 点击应用程序那个tab时下拉列表的适配器
	class SpinnerAdapter extends BaseAdapter {

		@Override
		public int getCount() {
			return spList.size();
		}

		@Override
		public Object getItem(int arg0) {
			return null;
		}

		@Override
		public long getItemId(int arg0) {
			return 0;
		}

		@Override
		public View getDropDownView(int position, View convertView,
				ViewGroup parent) {
			convertView = LayoutInflater.from(context).inflate(
					R.layout.clicktab_spinner_item, null);
			int color = SettingsHelper.getThemeColor(context);
			((TextView) convertView).setText(spList.get(position).getText());
			if (spList.get(position).isSelected()) {
				((TextView) convertView)
						.setCompoundDrawablesWithIntrinsicBounds(0, 0,
								R.drawable.btn_radio_on_holo_dark, 0);
				((TextView) convertView).getCompoundDrawables()[2]
						.setColorFilter(color, Mode.SRC_IN);
			} else {
				((TextView) convertView)
						.setCompoundDrawablesWithIntrinsicBounds(0, 0, 0, 0);
			}
			convertView.getBackground().setColorFilter(color, Mode.SRC_IN);
			return convertView;
		}

		@Override
		public View getView(int arg0, View arg1, ViewGroup arg2) {
			arg1 = LayoutInflater.from(context).inflate(
					R.layout.clicktab_spinner_default, null);
			SharedPreferences sp = context.getSharedPreferences(
					SettingsHelper.getIntPref(context, CommonMarks.MAIN_TAB_ID,
							1) + "gt", Context.MODE_PRIVATE);
			String str = sp
					.getString(
							SettingsHelper.getIntPref(context,
									CommonMarks.MAIN_TAB_ID, 1) + "gt",
							context.getResources().getString(
									R.string.drawer_menu_apps));
			((TextView) arg1).setText(str);
			return arg1;
		}

	}

	public void addTabItem(String title, int id) {
		TabSpec spec = null;
		tabView = (TextView) mLayoutInflater.inflate(
				R.layout.tab_widget_indicator, tabs, false);
		android.view.ViewGroup.LayoutParams lp1 = tabView.getLayoutParams();
		lp1.width = CommonMarks.drawer_tab_width;
		setTabIndicatorBgColor();
		tabView.setLayoutParams(lp1);
		tabView.setText(title);
		tabView.setContentDescription(title);
		spec = newTabSpec(id + "gt").setIndicator(tabView).setContent(
				contentFactory);
		addTab(spec);
		specList.add(spec);
		// CommonMarks.ContentTypeList.add(new DrawerTabItem(id, title));
	}

	public void addTabItemFromDb(String title, int id, int position) {
		String label;
		if (id == SettingsHelper
				.getIntPref(context, CommonMarks.MAIN_TAB_ID, 1)) {
			View view = mLayoutInflater.inflate(R.layout.clicktab, tabs, false);
			((ImageView) view.findViewById(R.id.tab_top)).getBackground()
					.setColorFilter(SettingsHelper.getThemeColor(getContext()),
							Mode.SRC_IN);
			spinner = (Spinner) view.findViewById(R.id.planets_spinner);
			spAdapter = new SpinnerAdapter();
			spinner.setAdapter(spAdapter);
			spinner.setOnItemSelectedListener(new OnItemSelectedListener() {
				@Override
				public void onItemSelected(AdapterView<?> arg0, View arg1,
						int arg2, long arg3) {
					switch (arg2) {
					case 0:
						if (!spToActivity) {
							changeAppList(ALLAPPS);
							for (int i = 0; i < spList.size(); i++) {
								spList.get(i).setSelected(false);
							}
							spList.get(0).setSelected(true);
							spAdapter.notifyDataSetChanged();
							spinnerPosition = 0;
							spToActivity = false;
						}
						spToActivity = false;
						break;
					case 1:
						if (!spToActivity) {
							changeAppList(RECENTTASK);
							for (int i = 0; i < spList.size(); i++) {
								spList.get(i).setSelected(false);
							}
							spList.get(1).setSelected(true);
							spAdapter.notifyDataSetChanged();
							spinnerPosition = 1;
							spToActivity = false;
						}
						spToActivity = false;
						break;
					case 2:
						if (!spToActivity) {
							changeAppList(NEWINSTALLAPPS);
							for (int i = 0; i < spList.size(); i++) {
								spList.get(i).setSelected(false);
							}
							spList.get(2).setSelected(true);
							spAdapter.notifyDataSetChanged();
							spinnerPosition = 2;
							spToActivity = false;
						}
						spToActivity = false;
						break;
					case 3:
						if (!spToActivity) {
							changeAppList(USERINSTALLAPPS);
							for (int i = 0; i < spList.size(); i++) {
								spList.get(i).setSelected(false);
							}
							spList.get(3).setSelected(true);
							spAdapter.notifyDataSetChanged();
							spinnerPosition = 3;
							spToActivity = false;
						}
						spToActivity = false;
						break;
					case 4:
						spToActivity = true;
						Intent inent = new Intent(context, TabSettingMain.class);
						inent.setAction("gtlauncher.drawer.tab");
						context.startActivity(inent);
						spinner.setSelection(spinnerPosition);
						break;
					case 5:
						spToActivity = true;
						Intent inent1 = new Intent(context,
								TabSettingMain.class);
						inent1.setAction("gtlauncher.drawer.folder");
						context.startActivity(inent1);
						spinner.setSelection(spinnerPosition);
						break;
					}
				}

				@Override
				public void onNothingSelected(AdapterView<?> arg0) {
				}
			});
			SharedPreferences sp = context.getSharedPreferences(
					SettingsHelper.getIntPref(context, CommonMarks.MAIN_TAB_ID,
							1) + "gt", Context.MODE_PRIVATE);
			label = sp
					.getString(
							SettingsHelper.getIntPref(context,
									CommonMarks.MAIN_TAB_ID, 1) + "gt",
							context.getResources().getString(
									R.string.drawer_menu_apps));
			android.view.ViewGroup.LayoutParams lp1 = view.getLayoutParams();
			lp1.width = CommonMarks.drawer_tab_width;
			view.setLayoutParams(lp1);
			view.setContentDescription(label);
			TabSpec spec1 = newTabSpec(APPS_TAB_TAG).setIndicator(view)
					.setContent(contentFactory);
			addTab(spec1);
			specList.add(spec1);
			CommonMarks.ContentTypeList.get(position)
					.setTitle(
							context.getResources().getString(
									R.string.drawer_menu_apps));
		} else if (id == SettingsHelper.getIntPref(context,
				CommonMarks.WIDGET_TAB_ID, 2)) {
			label = getContext().getString(R.string.widgets_tab_label);
			tabView = (TextView) mLayoutInflater.inflate(
					R.layout.tab_widget_indicator, tabs, false);
			android.view.ViewGroup.LayoutParams lp2 = tabView.getLayoutParams();
			lp2.width = CommonMarks.drawer_tab_width;
			setTabIndicatorBgColor();
			tabView.setLayoutParams(lp2);
			tabView.setText(label);
			tabView.setContentDescription(label);
			setTabIndicatorBgColor();
			TabSpec spec2 = newTabSpec(WIDGETS_TAB_TAG).setIndicator(tabView)
					.setContent(contentFactory);
			addTab(spec2);
			specList.add(spec2);
			CommonMarks.ContentTypeList.get(position).setTitle(label);
		} else {
			TabSpec spec = null;
			tabView = (TextView) mLayoutInflater.inflate(
					R.layout.tab_widget_indicator, tabs, false);
			android.view.ViewGroup.LayoutParams lp1 = tabView.getLayoutParams();
			lp1.width = CommonMarks.drawer_tab_width;
			tabView.setLayoutParams(lp1);
			tabView.setText(title);
			tabView.setContentDescription(title);
			setTabIndicatorBgColor();
			spec = newTabSpec(id + "gt").setIndicator(tabView).setContent(
					contentFactory);
			addTab(spec);
			specList.add(spec);
		}

	}

	private void changeAppList(int type) {
		switch (type) {
		case NEWINSTALLAPPS:
			new Thread(new Runnable() {
				@Override
				public void run() {
					int count = Launcher.storeAppList.size();
					mAppsCustomizePane.mApps = new ArrayList<ItemInfo>();
					for (int i = 0; i < count; i++) {
						if (Launcher.storeAppList.get(i) instanceof ApplicationInfo) {
							android.content.pm.ApplicationInfo appInfo = null;
							long installed = 0;
							try {
								appInfo = pm
										.getApplicationInfo(
												((ApplicationInfo) Launcher.storeAppList
														.get(i)).intent
														.getComponent()
														.getPackageName(), 0);
							} catch (NameNotFoundException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
							if (appInfo != null) {
								String appFile = appInfo.sourceDir;
								installed = new File(appFile).lastModified(); // Epoch
																				// Time
							}
							if (System.currentTimeMillis() - installed <= 86400000) {
								mAppsCustomizePane.mApps
										.add(Launcher.storeAppList.get(i));
							}
						}
					}
					Message msg = new Message();
					msg.what = NEWINSTALLAPPS;
					notifyHand.sendMessage(msg);
				}
			}).start();
			break;
		case USERINSTALLAPPS:
			new Thread(new Runnable() {
				@Override
				public void run() {
					int count = Launcher.storeAppList.size();
					mAppsCustomizePane.mApps = new ArrayList<ItemInfo>();
					for (int i = 0; i < count; i++) {
						if (Launcher.storeAppList.get(i) instanceof ApplicationInfo) {
							android.content.pm.ApplicationInfo appInfo = null;
							try {
								appInfo = pm
										.getApplicationInfo(
												((ApplicationInfo) Launcher.storeAppList
														.get(i)).intent
														.getComponent()
														.getPackageName(), 0);
							} catch (NameNotFoundException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
							if (appInfo != null) {
								if ((appInfo.flags & android.content.pm.ApplicationInfo.FLAG_SYSTEM) == 0) {// 非系统进程
									mAppsCustomizePane.mApps
											.add(Launcher.storeAppList.get(i));
								}
							}
						}
					}
					Message msg = new Message();
					msg.what = USERINSTALLAPPS;
					notifyHand.sendMessage(msg);
				}
			}).start();
			break;
		case RECENTTASK:
			new Thread(new Runnable() {
				@Override
				public void run() {
					int count = Launcher.storeAppList.size();
					mAppsCustomizePane.mApps = new ArrayList<ItemInfo>();
					List<RecentTaskInfo> recent = new ArrayList<RecentTaskInfo>();
					ActivityManager am = (ActivityManager) context
							.getSystemService(Context.ACTIVITY_SERVICE);
					recent = am.getRecentTasks(64,
							ActivityManager.RECENT_IGNORE_UNAVAILABLE);
					for (int i = 0; i < count; i++) {
						if (Launcher.storeAppList.get(i) instanceof ApplicationInfo) {
							for (int j = 0; j < recent.size(); j++) {
								if (recent.get(j).baseIntent
										.getComponent()
										.getPackageName()
										.equals(((ApplicationInfo) Launcher.storeAppList
												.get(i)).componentName
												.getPackageName())) {
									mAppsCustomizePane.mApps
											.add(Launcher.storeAppList.get(i));
									break;
								}
							}
						}
					}
					Message msg = new Message();
					msg.what = RECENTTASK;
					notifyHand.sendMessage(msg);
				}
			}).start();
			break;
		case ALLAPPS:
			mAppsCustomizePane.mApps = mAppsCustomizePane.allAppList;
			Message msg = new Message();
			msg.what = ALLAPPS;
			notifyHand.sendMessage(msg);
			break;
		}
	}

	class ComparatorPosition implements Comparator<DrawerTabItem> {

		@Override
		public int compare(DrawerTabItem item1, DrawerTabItem item2) {
			int flag = 1;
			if (item1.getPoistion() > item2.getPoistion()) {
				flag = 1;
			} else {
				flag = -1;
			}
			return flag;
		}

	}

	private void setTabIndicatorBgColor() {
		if (tabView != null)
			tabView.getBackground().setColorFilter(
					SettingsHelper.getThemeColor(getContext()), Mode.SRC_IN);
	}

	public void updateThemeColor() {
		int color = SettingsHelper.getThemeColor(getContext());

		View shopButton = findViewById(R.id.menu_button);
		shopButton.getBackground().setColorFilter(color, Mode.SRC_IN);
		hScrollView.getBackground().setColorFilter(color, Mode.SRC_IN);
		hScrollView.findViewById(android.R.id.tabs).getBackground()
				.setColorFilter(color, Mode.SRC_IN);

		if (specList != null && specList.size() > 0) {

			int size = specList.size();
			for (int i = 0; i < size; i++) {

				if (i >= CommonMarks.ContentTypeList.size())
					break;

				int id = CommonMarks.ContentTypeList.get(i).getId();
				if (id == SettingsHelper.getIntPref(context,
						CommonMarks.MAIN_TAB_ID, 1)) {
					((ImageView) getTabWidget().getChildAt(i).findViewById(
							R.id.tab_top)).getBackground().setColorFilter(
							color, Mode.SRC_IN);
				} else {
					((TextView) getTabWidget().getChildAt(i).findViewById(
							R.id.tab_top2)).getBackground().setColorFilter(
							color, Mode.SRC_IN);
				}
			}
		}
	}

	void selectShowType() {
		mAppsCustomizePane.isDrawerRefresh = true;
		mAppsCustomizePane.updatePageCounts();
		int mpage = 0;
		try {
			for (int i = 0; i < CommonMarks.ContentTypeList.size(); i++) {
				if (CommonMarks.ContentTypeList.get(i).getId() == SettingsHelper
						.getIntPref(context, CommonMarks.MAIN_TAB_ID, 1)) {
					break;
				}
				mpage = mAppsCustomizePane.mPageCountList.get(i) + mpage;
			}
		} catch (IndexOutOfBoundsException e) {
			mpage = 0;
		}
		mAppsCustomizePane.invalidatePageData(mpage);
		mAppsCustomizePane.clearIndicator();
	}

	public void onTrimMemory() {
		// Clear the widget pages of all their subviews - this will trigger the
		// widget previews
		// to delete their bitmaps
		mAppsCustomizePane.clearAllWidgetPreviews();
	}

	/* LauncherTransitionable overrides */
	@Override
	public void onLauncherTransitionStart(Launcher l, Animator animation,
			boolean toWorkspace) {
		mInTransition = true;
		// isHardwareAccelerated() checks if we're attached to a window and if
		// that
		// window is HW accelerated-- we were sometimes not attached to a window
		// and buildLayer was throwing an IllegalStateException
		if (animation != null && isHardwareAccelerated()) {
			// Turn on hardware layers for performance
			setLayerType(LAYER_TYPE_HARDWARE, null);

			// force building the layer at the beginning of the animation, so
			// you don't get a
			// blip early in the animation
			buildLayer();
		}
		if (!toWorkspace && !LauncherApplication.isScreenLarge()) {
			mAppsCustomizePane.showScrollingIndicator(false);
		}
		if (mResetAfterTransition) {
			mAppsCustomizePane.reset();
			mResetAfterTransition = false;
		}
	}

	@Override
	public void onLauncherTransitionEnd(Launcher l, Animator animation,
			boolean toWorkspace) {
		mInTransition = false;
		if (animation != null) {
			setLayerType(LAYER_TYPE_NONE, null);
		}

		if (!toWorkspace) {
			if (!LauncherApplication.isScreenLarge()) {
				mAppsCustomizePane.hideScrollingIndicator(false);
			}
		}
	}

}
